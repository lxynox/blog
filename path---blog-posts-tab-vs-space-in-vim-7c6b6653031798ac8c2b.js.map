{"version":3,"sources":["webpack:///path---blog-posts-tab-vs-space-in-vim-7c6b6653031798ac8c2b.js","webpack:///./.cache/json/blog-posts-tab-vs-space-in-vim.json"],"names":["webpackJsonp","404","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,OAAAC,OAAA,WAAkCC,gBAAmBC,GAAA,+FAAAC,KAAA,mgLAA4qLC,aAAyCL,MAAA,sBAAAM,KAAA,wBAA4DC,aAAgBC,KAAA,mCAAAC,UAAsDC,QAAUF,KAAA,2BAAiCH,aAAgBL,MAAA,oDAA2DW,MAASD,QAAUF,KAAA,qCAA2CH,aAAgBL,MAAA","file":"path---blog-posts-tab-vs-space-in-vim-7c6b6653031798ac8c2b.js","sourcesContent":["webpackJsonp([165514038114673],{\n\n/***/ 404:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Blog\",\"author\":\"lxynox\"}},\"markdownRemark\":{\"id\":\"/Users/lxy/Dev/code/blog/src/posts/tab-vs-space-in-vim.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><img src=\\\"/img/posts/2016-09-07/1.png\\\" alt=\\\"tab vs space sample\\\"></p>\\n<h2>Reason for this post</h2>\\n<p>I, personally, have been struggled with this issue for some time. I am kinda person who has a really poor memory, but i am pretty sure i’ve googled it for at least twice, and each time, has spent decent amount of time on researching.</p>\\n<p>I really missed the old days When i was a (Notepad++❓❓❓Sublime Text2❗️❓or Atom❗️❗️) user who has a spirit of sticking to the original (default settings). But once you fell into some other “Linux/Unix born” 👻 editors, like Vi/Vim or Emacs, you normally will only have 2 choice, endless of suffering or save yourself.\\n<img src=\\\"/img/posts/2016-09-07/2.png\\\" alt=\\\"tab vs space comic\\\"></p>\\n<h2>Advantage vs Disadvantage</h2>\\n<h3>Space beats Tab</h3>\\n<ol>\\n<li>Space is widely used for aligning text, text alignment and formatting is useful especially for annotation and documentation.</li>\\n<li>Space share the same look across all different platforms while tab might look very different</li>\\n<li>Some languages enforces/strictly recommends stylish rules, like python(4 spaces indention), javascript(2 spaces indention), java(mostly 4 spaces indention) etc.</li>\\n</ol>\\n<h3>Tab beats Space</h3>\\n<ol>\\n<li>Tab is highly customizable they can be changed to arbitrary values(3,4,8 etc) as the reader wants/used to.</li>\\n<li>It’s obvious that tab helps save a lot of spaces when it comes to editing large files with multiple lines.</li>\\n</ol>\\n<h2>Vim tab settings</h2>\\n<ul>\\n<li><code class=\\\"language-text\\\">expandtab</code>: applies to <strong>write</strong> mode only. Set/convert vim’s <code class=\\\"language-text\\\">&lt;tab&gt;</code> to <code class=\\\"language-text\\\">&lt;space&gt;</code> in <strong>insertion</strong> mode. If set, it implies that that only space will be used for insertion all the time.</li>\\n<li><code class=\\\"language-text\\\">ts</code>: aka. tabstop, applies to <strong>read</strong> mode only. It denotes (# of columns) the <code class=\\\"language-text\\\">&lt;tab&gt;</code> character visually displays/appears in vim, by default it’s 8 in most Unix/Linux Systems and <strong>NOT</strong> recommended to be changed for some printing and cross platform reasons.</li>\\n<li>\\n<p><code class=\\\"language-text\\\">sts</code>: aka. softtabstop, applies to <strong>write</strong> mode. It represents , in <code class=\\\"language-text\\\">insertion</code> mode, that pressing a <code class=\\\"language-text\\\">&lt;tab&gt;</code> key (# of columns) will be inserted.</p>\\n<ul>\\n<li>if sts > ts: vim uses as many <code class=\\\"language-text\\\">&lt;tab&gt;</code> as possible and fill the rest with <code class=\\\"language-text\\\">&lt;space&gt;</code> to represents a <code class=\\\"language-text\\\">&lt;tab&gt;</code> press in <code class=\\\"language-text\\\">insertion</code> mode, for eg.setlocal sts = 20 ts = 8, then vim uses 2 <code class=\\\"language-text\\\">&lt;tab&gt;</code> + 4 <code class=\\\"language-text\\\">&lt;space&gt;</code> to represent a <code class=\\\"language-text\\\">&lt;tab&gt;</code> press.</li>\\n<li>elif sts &#x3C; ts: vim fills (sts)# of <code class=\\\"language-text\\\">&lt;space&gt;</code> when pressing a <code class=\\\"language-text\\\">&lt;tab&gt;</code> in <code class=\\\"language-text\\\">insertion</code> mode.</li>\\n</ul>\\n</li>\\n<li><code class=\\\"language-text\\\">sw</code>: aka. shiftwidth, denotes # of columns <code class=\\\"language-text\\\">&gt;&gt;</code> or <code class=\\\"language-text\\\">&lt;&lt;</code> equals to.</li>\\n<li><code class=\\\"language-text\\\">stab</code>: aka. smarttab, it tells vim to use <code class=\\\"language-text\\\">sw</code> for indention at the beginning of each line, whereas ‘tabstop’ and ‘softtabstop’ are used elsewhere.</li>\\n</ul>\\n<h3>Some reference settings</h3>\\n<p>From Vim wiki:</p>\\n<p>Create file html.vim(~/.vim/after/ftplugin/html.vim) with contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">setlocal shiftwidth=2\\nsetlocal tabstop=2</code></pre>\\n      </div>\\n<p>and file python.vim with contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">setlocal expandtab\\nsetlocal shiftwidth=4\\nsetlocal softtabstop=4</code></pre>\\n      </div>\\n<p>or if <code class=\\\"language-text\\\">.vimrc</code> is preferred,</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">autocmd FileType html setlocal shiftwidth=2 tabstop=2\\nautocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4</code></pre>\\n      </div>\\n<p>My personal funky <code class=\\\"language-text\\\">.vimrc</code> settings</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">autocmd FileType * setlocal noexpandtab tabstop=4 shiftwidth=4 smarttab\\nautocmd BufNewFile,BufRead *.py setlocal expandtab tabstop=4 shiftwidth=4\\nautocmd BufNewFile,BufRead *.js setlocal expandtab shiftwidth=2 softtabstop=2</code></pre>\\n      </div>\\n<h3>Conclusion</h3>\\n<p>In fact, the debate among space or tab is just like single quote or double quote, semicolon or nosemicolon. It’s mainly a stylish problem which heavily relies on personal taste. Kinda like vim or emacs, years of debate will not help bring them to an end. From my personal shallow intuitive perspective, i will just follow something i am in favor of. As i’ve been using <code class=\\\"language-text\\\">&lt;space&gt;</code> over <code class=\\\"language-text\\\">&lt;tab&gt;</code> for some time(notice, i’m a js citizen, to be more precise, a js newbie👶), i find it could be fun to switch to the tribe of <code class=\\\"language-text\\\">&lt;tab&gt;</code> for a while.</p>\",\"frontmatter\":{\"title\":\"Space or Tab in Vim\",\"date\":\"September 08, 2016\"}}},\"pathContext\":{\"slug\":\"/blog/posts/tab-vs-space-in-vim/\",\"previous\":{\"fields\":{\"slug\":\"/blog/posts/why-alfred/\"},\"frontmatter\":{\"title\":\"The app i leave ⌘ + space shortcuts for: Alfred\"}},\"next\":{\"fields\":{\"slug\":\"/blog/posts/some-words-about-vim/\"},\"frontmatter\":{\"title\":\"some words about vim\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-posts-tab-vs-space-in-vim-7c6b6653031798ac8c2b.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Blog\",\"author\":\"lxynox\"}},\"markdownRemark\":{\"id\":\"/Users/lxy/Dev/code/blog/src/posts/tab-vs-space-in-vim.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><img src=\\\"/img/posts/2016-09-07/1.png\\\" alt=\\\"tab vs space sample\\\"></p>\\n<h2>Reason for this post</h2>\\n<p>I, personally, have been struggled with this issue for some time. I am kinda person who has a really poor memory, but i am pretty sure i’ve googled it for at least twice, and each time, has spent decent amount of time on researching.</p>\\n<p>I really missed the old days When i was a (Notepad++❓❓❓Sublime Text2❗️❓or Atom❗️❗️) user who has a spirit of sticking to the original (default settings). But once you fell into some other “Linux/Unix born” 👻 editors, like Vi/Vim or Emacs, you normally will only have 2 choice, endless of suffering or save yourself.\\n<img src=\\\"/img/posts/2016-09-07/2.png\\\" alt=\\\"tab vs space comic\\\"></p>\\n<h2>Advantage vs Disadvantage</h2>\\n<h3>Space beats Tab</h3>\\n<ol>\\n<li>Space is widely used for aligning text, text alignment and formatting is useful especially for annotation and documentation.</li>\\n<li>Space share the same look across all different platforms while tab might look very different</li>\\n<li>Some languages enforces/strictly recommends stylish rules, like python(4 spaces indention), javascript(2 spaces indention), java(mostly 4 spaces indention) etc.</li>\\n</ol>\\n<h3>Tab beats Space</h3>\\n<ol>\\n<li>Tab is highly customizable they can be changed to arbitrary values(3,4,8 etc) as the reader wants/used to.</li>\\n<li>It’s obvious that tab helps save a lot of spaces when it comes to editing large files with multiple lines.</li>\\n</ol>\\n<h2>Vim tab settings</h2>\\n<ul>\\n<li><code class=\\\"language-text\\\">expandtab</code>: applies to <strong>write</strong> mode only. Set/convert vim’s <code class=\\\"language-text\\\">&lt;tab&gt;</code> to <code class=\\\"language-text\\\">&lt;space&gt;</code> in <strong>insertion</strong> mode. If set, it implies that that only space will be used for insertion all the time.</li>\\n<li><code class=\\\"language-text\\\">ts</code>: aka. tabstop, applies to <strong>read</strong> mode only. It denotes (# of columns) the <code class=\\\"language-text\\\">&lt;tab&gt;</code> character visually displays/appears in vim, by default it’s 8 in most Unix/Linux Systems and <strong>NOT</strong> recommended to be changed for some printing and cross platform reasons.</li>\\n<li>\\n<p><code class=\\\"language-text\\\">sts</code>: aka. softtabstop, applies to <strong>write</strong> mode. It represents , in <code class=\\\"language-text\\\">insertion</code> mode, that pressing a <code class=\\\"language-text\\\">&lt;tab&gt;</code> key (# of columns) will be inserted.</p>\\n<ul>\\n<li>if sts > ts: vim uses as many <code class=\\\"language-text\\\">&lt;tab&gt;</code> as possible and fill the rest with <code class=\\\"language-text\\\">&lt;space&gt;</code> to represents a <code class=\\\"language-text\\\">&lt;tab&gt;</code> press in <code class=\\\"language-text\\\">insertion</code> mode, for eg.setlocal sts = 20 ts = 8, then vim uses 2 <code class=\\\"language-text\\\">&lt;tab&gt;</code> + 4 <code class=\\\"language-text\\\">&lt;space&gt;</code> to represent a <code class=\\\"language-text\\\">&lt;tab&gt;</code> press.</li>\\n<li>elif sts &#x3C; ts: vim fills (sts)# of <code class=\\\"language-text\\\">&lt;space&gt;</code> when pressing a <code class=\\\"language-text\\\">&lt;tab&gt;</code> in <code class=\\\"language-text\\\">insertion</code> mode.</li>\\n</ul>\\n</li>\\n<li><code class=\\\"language-text\\\">sw</code>: aka. shiftwidth, denotes # of columns <code class=\\\"language-text\\\">&gt;&gt;</code> or <code class=\\\"language-text\\\">&lt;&lt;</code> equals to.</li>\\n<li><code class=\\\"language-text\\\">stab</code>: aka. smarttab, it tells vim to use <code class=\\\"language-text\\\">sw</code> for indention at the beginning of each line, whereas ‘tabstop’ and ‘softtabstop’ are used elsewhere.</li>\\n</ul>\\n<h3>Some reference settings</h3>\\n<p>From Vim wiki:</p>\\n<p>Create file html.vim(~/.vim/after/ftplugin/html.vim) with contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">setlocal shiftwidth=2\\nsetlocal tabstop=2</code></pre>\\n      </div>\\n<p>and file python.vim with contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">setlocal expandtab\\nsetlocal shiftwidth=4\\nsetlocal softtabstop=4</code></pre>\\n      </div>\\n<p>or if <code class=\\\"language-text\\\">.vimrc</code> is preferred,</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">autocmd FileType html setlocal shiftwidth=2 tabstop=2\\nautocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4</code></pre>\\n      </div>\\n<p>My personal funky <code class=\\\"language-text\\\">.vimrc</code> settings</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">autocmd FileType * setlocal noexpandtab tabstop=4 shiftwidth=4 smarttab\\nautocmd BufNewFile,BufRead *.py setlocal expandtab tabstop=4 shiftwidth=4\\nautocmd BufNewFile,BufRead *.js setlocal expandtab shiftwidth=2 softtabstop=2</code></pre>\\n      </div>\\n<h3>Conclusion</h3>\\n<p>In fact, the debate among space or tab is just like single quote or double quote, semicolon or nosemicolon. It’s mainly a stylish problem which heavily relies on personal taste. Kinda like vim or emacs, years of debate will not help bring them to an end. From my personal shallow intuitive perspective, i will just follow something i am in favor of. As i’ve been using <code class=\\\"language-text\\\">&lt;space&gt;</code> over <code class=\\\"language-text\\\">&lt;tab&gt;</code> for some time(notice, i’m a js citizen, to be more precise, a js newbie👶), i find it could be fun to switch to the tribe of <code class=\\\"language-text\\\">&lt;tab&gt;</code> for a while.</p>\",\"frontmatter\":{\"title\":\"Space or Tab in Vim\",\"date\":\"September 08, 2016\"}}},\"pathContext\":{\"slug\":\"/blog/posts/tab-vs-space-in-vim/\",\"previous\":{\"fields\":{\"slug\":\"/blog/posts/why-alfred/\"},\"frontmatter\":{\"title\":\"The app i leave ⌘ + space shortcuts for: Alfred\"}},\"next\":{\"fields\":{\"slug\":\"/blog/posts/some-words-about-vim/\"},\"frontmatter\":{\"title\":\"some words about vim\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-posts-tab-vs-space-in-vim.json\n// module id = 404\n// module chunks = 165514038114673"],"sourceRoot":""}